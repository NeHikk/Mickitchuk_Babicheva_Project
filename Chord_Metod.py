def chord_method(f, a, b, epsilon=1e-6, max_iter=1000):
    """начальный код, проверка выполнения программы"""
    
    """
    Решение нелинейного уравнения методом хорд
    
    Параметры:
    f - функция, корень которой ищем
    a, b - границы интервала, на котором ищем корень
    epsilon - точность
    max_iter - максимальное число итераций
    
    Возвращает:
    x - найденный корень
    """
    if f(a) * f(b) >= 0:
        raise ValueError("Функция должна иметь разные знаки на концах интервала")
    
    for _ in range(max_iter):
        # Вычисляем точку пересечения хорды с осью x
        x = a - f(a) * (b - a) / (f(b) - f(a))
        
        # Проверяем условие сходимости
        if abs(f(x)) < epsilon:
            return x
        
        # Обновляем границы интервала
        if f(a) * f(x) < 0:
            b = x
        else:
            a = x
    
    raise ValueError(f"Метод не сошелся за {max_iter} итераций")

# Пример использования
if __name__ == "__main__":
    import math
    
    # Определяем функцию, корень которой ищем
    def f(x):
        return x**3 - 2*x - 5
    
    # Ищем корень на интервале [1, 3]
    try:
        root = chord_method(f, 1, 3)
        print(f"Найденный корень: {root:.6f}")
        print(f"Значение функции в корне: {f(root):.6e}")
    except ValueError as e:
        print(e)